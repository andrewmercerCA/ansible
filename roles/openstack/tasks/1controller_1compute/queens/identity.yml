--- # https://docs.openstack.org/keystone/queens/install/
# Interesting note:
# https://docs.openstack.org/keystone/queens/getting-started/architecture.html
# "Keystone is an HTTP front-end to several services. Like other OpenStack applications, this is done using python WSGI interfaces and applications are configured together using Paste."
# https://pypi.org/project/Paste
# Paste is in maintenance mode and recently moved from bitbucket to github. Patches are accepted to keep it on life support, but for the most part, please consider using other options.

- name: keystone
  block:
    - name: create keystone database
      mysql_db:
        #login_user: mysql
        #login_password: "{{ the_password }}"
        name: keystone
        state: present

    - name: create keystone user
      mysql_user:
        #login_user: mysql
        #login_password: "{{ the_password }}"
        host: "{{ item }}"
        name: keystone
        password: "{{ the_password }}"
        priv: "keystone.*:ALL"
        state: present
      with_items:
        - localhost
        - 127.0.0.1
        - ::1
        - "{{ ansible_hostname }}"

    - name: install keystone, httpd and mod_wsgi
      yum:
        name:
          - openstack-keystone
          - httpd
          - mod_wsgi

    - name: configure keystone
      copy:
        content: |
          [database]
          connection = mysql+pymysql://keystone:{{ the_password }}@controller0/keystone

          [token]
          provider = fernet
        dest: /etc/keystone/keystone.conf
      notify: "restart httpd"

    - name: populate the keystone database
      command: /bin/sh -c "keystone-manage db_sync" keystone
      register: populate_keystone

    - name: output populate keystone
      debug:
        msg: "{{ populate_keystone }}"

    - name: initialize fernet repositories
      shell: "{{ item }}"
      with_items:
        - keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
        - keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
      register: fernet_repositories

    - name: output fernet repositories
      debug:
        msg: "{{ fernet_repositories }}"

    - name: bootstrap the identity service
      shell: |
        keystone-manage bootstrap --bootstrap-password "{{ the_password }}" \
        --bootstrap-admin-url http://controller0:5000/v3/ \
        --bootstrap-internal-url http://controller0:5000/v3/ \
        --bootstrap-public-url http://controller0:5000/v3/ \
        --bootstrap-region-id RegionOne
      register: bootstrap_identity

    - name: output bootstrap identity
      debug:
        msg: "{{ bootstrap_identity }}"

    - name: configure httpd
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^ServerName '
        line: ServerName controller0
      notify: "restart httpd"

    - name: create wsgi-keystone.conf
      file:
        dest: /etc/httpd/conf.d/wsgi-keystone.conf
        src: /usr/share/keystone/wsgi-keystone.conf
        state: link

    - name: start and enable httpd
      service:
        enabled: yes
        name: httpd
        state: started

    - name: export variables
      copy:
        content: |
          export OS_USERNAME=admin
          export OS_PASSWORD={{ the_password }}
          export OS_PROJECT_NAME=admin
          export OS_USER_DOMAIN_NAME=Default
          export OS_PROJECT_DOMAIN_NAME=Default
          export OS_AUTH_URL="http://controller0:5000/v3"
          export OS_IDENTITY_API_VERSION="3"
        dest: /root/admin-rc

    - name: create domain
      shell: source /root/admin-rc && openstack domain create --description "an example domain" example
      register: create_domain

    - name: output domain create
      debug:
        msg: "{{ create_domain }}"

    - name: create project
      shell: openstack project create --domain default  --description "Service Project" service
      register: create_project

    - name: output project create
      debug:
        msg: "{{ create_project }}"

  when:
    - ( 'controller' in ansible_hostname )
    - ansible_facts['distribution'] == 'CentOS'
