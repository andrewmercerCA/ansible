---

- name: "{{ ansible_distribution }}: Install Docker dependencies"
  yum:
    name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
    state: present
  when: ansible_os_family == 'RedHat'

## This section is a problem. I think it only exists because there is a Gnome
## specific package called docker that might confuse some people.
## Removing until problems arise that require it and then I'll improve the logic.
#- name: "{{ ansible_distribution }}: remove old versions of docker"
#  yum:
#    name:
#      - docker
#      - docker-common
#      - docker-selinux
#      - docker-engine-selinux
#      - docker-engine
#    state: absent
#  when: ansible_os_family == 'RedHat'
#####

- name: "{{ ansible_distribution }}: Install Docker official repository"
  command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  when: ansible_os_family == 'RedHat'

## keep this for when I switch to dnf
#- name: "{{ansible_distribution}}: Update cache and accept Docker gpg key"
#  command: dnf --assumeyes makecache
#  when: ansible_distribution == 'Fedora'

- name: "{{ ansible_distribution }}: Install Docker"
  yum:
    name:
      - containerd.io
      - docker-ce
      - docker-ce-cli
  when: ansible_os_family == 'RedHat'

- name: "{{ ansible_distribution }}: Create /etc/docker directory"
  file:
    path: /etc/docker
    state: directory

- name: "{{ ansible_distribution }}: Setup Docker daemon"
  copy:
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2",
        "storage-opts": [
          "overlay2.override_kernel_check=true"
        ]
      }
    dest: /etc/docker/daemon.json
  notify: docker-restart

- name: "{{ ansible_distribution }}: Create the /etc/systemd/system/docker.service.d directory"
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
  notify: systemd-daemon-reload

- name: "{{ ansible_distribution }}: Start and enable Docker container service"
  service:
    enabled: yes
    name: docker.service
    state: started

#- name: "{{ ansible_distribution }}: add user to docker group"
#  user:
#    groups: docker
#    name: "{{ ansible_user_id }}"
#
- name: "{{ ansible_distribution }}: Reboot nodes"
  vars:
    msg: |
      Until I get the userid thing figured out, issue a reboot on the nodes once your plays are done:

      ansible [inventory_group] -i [inventory_file] -m user -a "name=amercer groups=docker append=yes" --become && \
      ansible [inventory_group] -i [inventory_file] -m reboot --become
  debug:
    msg: "{{ msg.split('\n') }}"
